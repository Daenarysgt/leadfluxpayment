import { supabase } from '@/lib/supabase';
import axios from 'axios';
import { Plan } from '@/config/plans';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001/api';
const APP_URL = import.meta.env.VITE_APP_URL || window.location.origin;

/**
 * Servi√ßo para gerenciar opera√ß√µes relacionadas a pagamentos
 */
export const paymentService = {
  /**
   * Obt√©m a sess√£o do usu√°rio atual
   */
  async getUserSession() {
    return await supabase.auth.getSession();
  },

  /**
   * Cria uma sess√£o de checkout do Stripe para o plano selecionado
   */
  async createCheckoutSession(planId: string, interval: 'month' | 'year'): Promise<{ url: string }> {
    try {
      // Verifica√ß√£o adicional dos par√¢metros para evitar erros de valida√ß√£o
      if (!planId || typeof planId !== 'string') {
        throw new Error(`ID do plano inv√°lido: ${planId}`);
      }
      
      if (!interval || (interval !== 'month' && interval !== 'year')) {
        throw new Error(`Intervalo inv√°lido: ${interval}`);
      }
      
      console.log('üîë Iniciando cria√ß√£o de sess√£o de checkout, verificando autentica√ß√£o...');
      
      // Obter token de autentica√ß√£o
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session || !session.access_token) {
        throw new Error('Usu√°rio n√£o autenticado');
      }
      
      console.log('‚úÖ Usu√°rio autenticado, enviando requisi√ß√£o com os seguintes dados:', {
        planId: planId.trim(),
        interval,
        successUrl: `${APP_URL}/payment/success`,
        cancelUrl: `${APP_URL}/payment/canceled`,
        tokenPresente: !!session.access_token,
        tokenLength: session.access_token.length,
        api_url: API_URL
      });
      
      // Fazer requisi√ß√£o para API backend com tratamento melhorado de erros
      try {
        const response = await axios.post(
          `${API_URL}/payment/create-checkout-session`,
          { 
            planId: planId.trim(), // Garantir que n√£o h√° espa√ßos extras
            interval,
            successUrl: `${APP_URL}/payment/success`,
            cancelUrl: `${APP_URL}/payment/canceled`
          },
          {
            headers: {
              Authorization: `Bearer ${session.access_token}`,
              'Content-Type': 'application/json'
            },
            timeout: 10000 // 10 segundos de timeout
          }
        );
        
        console.log('‚úÖ Resposta recebida do servidor:', {
          status: response.status,
          checkoutUrl: response.data?.url
        });
        
        return response.data;
      } catch (axiosError: any) {
        // Melhorar detalhamento do erro para diagn√≥stico
        if (axiosError.response) {
          // O servidor retornou uma resposta com c√≥digo de erro
          console.error('‚ùå Erro na resposta do servidor:', {
            status: axiosError.response.status,
            data: axiosError.response.data,
            headers: axiosError.response.headers
          });
          
          if (axiosError.response.status === 400) {
            throw new Error(`Dados inv√°lidos: ${JSON.stringify(axiosError.response.data)}`);
          } else if (axiosError.response.status === 401) {
            throw new Error('Token de autentica√ß√£o inv√°lido ou expirado');
          } else if (axiosError.response.status === 429) {
            throw new Error('Limite de requisi√ß√µes excedido. Tente novamente em alguns minutos.');
          } else {
            throw new Error(`Erro do servidor: ${axiosError.response.status} - ${JSON.stringify(axiosError.response.data)}`);
          }
        } else if (axiosError.request) {
          // A requisi√ß√£o foi feita mas n√£o houve resposta
          console.error('‚ùå Sem resposta do servidor:', axiosError.request);
          throw new Error('Servidor n√£o respondeu √† requisi√ß√£o. Verifique sua conex√£o com a internet.');
        } else {
          // Erro na configura√ß√£o da requisi√ß√£o
          console.error('‚ùå Erro na configura√ß√£o da requisi√ß√£o:', axiosError.message);
          throw new Error(`Erro ao configurar requisi√ß√£o: ${axiosError.message}`);
        }
      }
    } catch (error: any) {
      console.error('‚ùå Erro ao criar sess√£o de checkout:', error);
      
      // Repassar o erro para ser tratado pelo componente
      throw error;
    }
  },
  
  /**
   * Verifica o status de um pagamento ap√≥s retorno do Stripe
   */
  async verifyPaymentStatus(sessionId: string): Promise<{
    success: boolean;
    planId?: string;
    error?: string;
    subscription?: {
      id: string;
      status: string;
      currentPeriodEnd: Date;
    }
  }> {
    try {
      // Obter token de autentica√ß√£o
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session || !session.access_token) {
        throw new Error('Usu√°rio n√£o autenticado');
      }
      
      // Verificar status do pagamento
      const response = await axios.get(
        `${API_URL}/payment/verify-session/${sessionId}`,
        {
          headers: {
            Authorization: `Bearer ${session.access_token}`
          }
        }
      );
      
      // Se o pagamento foi bem-sucedido, salvar nas storages para persist√™ncia
      if (response.data.success) {
        localStorage.setItem('subscription_status', 'active');
        localStorage.setItem('subscription_planId', response.data.planId || '');
        sessionStorage.setItem('subscription_status_backup', 'active');
        sessionStorage.setItem('subscription_planId_backup', response.data.planId || '');
        console.log('üíæ Status de assinatura salvo localmente ap√≥s verifica√ß√£o bem-sucedida');
      }
      
      return response.data;
    } catch (error) {
      console.error('Erro ao verificar status do pagamento:', error);
      throw error;
    }
  },
  
  /**
   * Obt√©m informa√ß√µes da assinatura atual do usu√°rio
   * Inclui mecanismo de retry para evitar race conditions com o webhook
   */
  async getCurrentSubscription(maxRetries = 3, retryDelay = 2000): Promise<{
    planId: string;
    status: string;
    currentPeriodEnd: Date;
    cancelAtPeriodEnd: boolean;
  } | null> {
    let attempts = 0;
    
    // Verificar se temos dados de assinatura no armazenamento local
    const localStatus = localStorage.getItem('subscription_status');
    const localPlanId = localStorage.getItem('subscription_planId');
    const sessionStatus = sessionStorage.getItem('subscription_status_backup');
    const localTimestamp = localStorage.getItem('subscription_activated_at');
    
    console.log('üìä Verificando status local da assinatura:', { 
      localStorage: localStatus, 
      planId: localPlanId,
      sessionStorage: sessionStatus,
      timestamp: localTimestamp,
      isRecent: localTimestamp ? (Date.now() - Number(localTimestamp) < 24 * 60 * 60 * 1000) : false
    });
    
    // NOVO: Verificar diretamente no banco de dados como primeira op√ß√£o
    try {
      console.log('üîç Tentando verifica√ß√£o direta no banco via paymentService...');
      const { data: { user } } = await supabase.auth.getUser();
      
      if (user) {
        console.log('‚úÖ Usu√°rio autenticado:', user.id);
        
        // Verificar assinatura diretamente no Supabase
        const { data: subscriptions, error: subError } = await supabase
          .from('subscriptions')
          .select('*')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false })
          .limit(1);
        
        if (!subError && subscriptions && subscriptions.length > 0) {
          const subscription = subscriptions[0];
          const now = Math.floor(Date.now() / 1000);
          
          console.log('üìä Assinatura encontrada diretamente:', {
            id: subscription.id,
            status: subscription.status,
            plan_id: subscription.plan_id,
            current_period_end: subscription.current_period_end,
            subscription_id: subscription.subscription_id,
            valid: subscription.current_period_end > now,
            now: now
          });

          // NOVO: Verificar status no Stripe para assinaturas consideradas ativas
          if (subscription.status === 'active' && subscription.subscription_id) {
            try {
              // Obter token de autentica√ß√£o
              const { data: { session } } = await supabase.auth.getSession();
              
              if (session && session.access_token) {
                // Verificar status real da assinatura no Stripe via API
                const response = await axios.get(
                  `${API_URL}/payment/verify-stripe-subscription/${subscription.subscription_id}`,
                  {
                    headers: {
                      Authorization: `Bearer ${session.access_token}`
                    }
                  }
                );
                
                if (response.data && response.data.stripeStatus) {
                  console.log('üîÑ Status verificado no Stripe:', response.data.stripeStatus);
                  
                  // Se o status no Stripe for diferente do banco, atualizar
                  if (response.data.stripeStatus === 'canceled' && subscription.status !== 'canceled') {
                    console.log('‚ö†Ô∏è Assinatura cancelada no Stripe, mas ativa no banco. Atualizando...');
                    
                    // Atualizar status no banco de dados
                    const { error: updateError } = await supabase
                      .from('subscriptions')
                      .update({
                        status: 'canceled',
                        updated_at: Math.floor(Date.now() / 1000)
                      })
                      .eq('id', subscription.id);
                    
                    if (updateError) {
                      console.error('‚ùå Erro ao atualizar status da assinatura:', updateError);
                    } else {
                      console.log('‚úÖ Status da assinatura atualizado para canceled');
                      subscription.status = 'canceled';
                    }
                  }
                }
              }
            } catch (stripeCheckError) {
              console.error('‚ùå Erro ao verificar status no Stripe:', stripeCheckError);
              // Continuar com os dados do banco mesmo se falhar a verifica√ß√£o no Stripe
            }
          }
          
          // Verificar se ainda est√° v√°lida - considerar v√°lida se status for 'active'
          if (subscription.status === 'active') {
            console.log('‚úÖ Assinatura v√°lida e ativa encontrada via verifica√ß√£o direta no paymentService!');
            
            // Atualizar localStorage
            localStorage.setItem('subscription_status', 'active');
            localStorage.setItem('subscription_planId', subscription.plan_id);
            localStorage.setItem('subscription_activated_at', Date.now().toString());
            sessionStorage.setItem('subscription_status_backup', 'active');
            sessionStorage.setItem('subscription_planId_backup', subscription.plan_id);
            
            return {
              planId: subscription.plan_id,
              status: 'active',
              currentPeriodEnd: new Date(subscription.current_period_end * 1000),
              cancelAtPeriodEnd: subscription.cancel_at_period_end || false
            };
          } else if (subscription.status === 'canceled') {
            console.log('‚ö†Ô∏è Assinatura cancelada encontrada');
            
            // Limpar localStorage se houver dados de assinatura ativa
            if (localStatus === 'active') {
              localStorage.removeItem('subscription_status');
              localStorage.removeItem('subscription_planId');
              localStorage.removeItem('subscription_activated_at');
              sessionStorage.removeItem('subscription_status_backup');
              sessionStorage.removeItem('subscription_planId_backup');
            }
            
            return {
              planId: subscription.plan_id,
              status: 'canceled',
              currentPeriodEnd: new Date(subscription.current_period_end * 1000),
              cancelAtPeriodEnd: true
            };
          } else {
            console.log('‚ö†Ô∏è Assinatura encontrada com status diferente de active/canceled:', subscription.status);
          }
        } else {
          console.log('‚ÑπÔ∏è Nenhuma assinatura encontrada via verifica√ß√£o direta no paymentService');
        }
      }
    } catch (directCheckError) {
      console.error('‚ùå Erro na verifica√ß√£o direta via paymentService:', directCheckError);
      // Continuar com a verifica√ß√£o via API normal
    }
    
    // Continuar com o fluxo normal se a verifica√ß√£o direta falhar
    while (attempts < maxRetries) {
      try {
        // Obter token de autentica√ß√£o
        const { data: { session } } = await supabase.auth.getSession();
        
        if (!session || !session.access_token) {
          console.log('‚ö†Ô∏è Usu√°rio n√£o autenticado ao verificar assinatura');
          
          // Se n√£o est√° autenticado mas temos dados locais de assinatura ativa, use como fallback
          if (localStatus === 'active' && localPlanId) {
            console.log('‚ö†Ô∏è Usando dados locais de assinatura devido a problemas de autentica√ß√£o');
            return {
              planId: localPlanId,
              status: 'active',
              currentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // +30 dias como fallback
              cancelAtPeriodEnd: false
            };
          }
          
          return null;
        }
        
        console.log(`üìù Verificando assinatura (tentativa ${attempts + 1}/${maxRetries})...`);
        console.log(`üîë Token de acesso: ${session.access_token.substring(0, 10)}...`);
        
        // Tentar obter informa√ß√µes da assinatura com timeout para evitar esperas longas
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 segundos timeout
        
        try {
          // Obter informa√ß√µes da assinatura
          const response = await axios.get(
            `${API_URL}/payment/subscription`,
            {
              headers: {
                Authorization: `Bearer ${session.access_token}`
              },
              signal: controller.signal
            }
          );
          
          clearTimeout(timeoutId);
          
          // Log adicional para diagn√≥stico
          console.log('üîç Resposta completa da API:', {
            status: response.status,
            data: response.data
          });
          
          // Se houver resposta com dados, atualizar storage local e retornar
          if (response.data) {
            console.log('‚úÖ Assinatura encontrada via API:', response.data);
            
            // Atualizar storage local se for uma assinatura ativa
            if (response.data.status === 'active') {
              localStorage.setItem('subscription_status', 'active');
              localStorage.setItem('subscription_planId', response.data.planId);
              localStorage.setItem('subscription_activated_at', Date.now().toString());
              sessionStorage.setItem('subscription_status_backup', 'active');
              sessionStorage.setItem('subscription_planId_backup', response.data.planId);
              console.log('üíæ Status de assinatura atualizado no storage local');
            }
            
            return response.data;
          } else {
            console.log('‚ö†Ô∏è API retornou resposta vazia');
          }
        } catch (requestError: any) {
          clearTimeout(timeoutId);
          
          if (requestError.name === 'AbortError' || requestError.code === 'ECONNABORTED') {
            console.warn('‚ö†Ô∏è Timeout ao buscar assinatura');
          } else {
            console.error('‚ùå Erro na requisi√ß√£o:', requestError.message || requestError);
          }
        }
        
        // Se n√£o houver resposta da API, mas temos dados locais de assinatura ativa, use como fallback
        if (attempts === maxRetries - 1 && (localStatus === 'active' || sessionStatus === 'active') && localPlanId) {
          // Verificar se os dados locais s√£o recentes
          const isRecent = localTimestamp && 
            (Date.now() - Number(localTimestamp) < 24 * 60 * 60 * 1000);
            
          if (isRecent) {
            console.log('‚ö†Ô∏è API n√£o retornou assinatura, usando dados locais recentes como fallback');
            return {
              planId: localPlanId,
              status: 'active',
              currentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // +30 dias como fallback
              cancelAtPeriodEnd: false
            };
          } else {
            console.log('‚ö†Ô∏è Dados locais existem mas n√£o s√£o recentes (>24h)');
          }
        }
        
        // Se n√£o houver dados e ainda temos tentativas, esperar e tentar novamente
        if (attempts < maxRetries - 1) {
          console.log(`‚è≥ Assinatura n√£o encontrada, tentando novamente em ${retryDelay/1000}s...`);
          await new Promise(resolve => setTimeout(resolve, retryDelay));
          attempts++;
        } else {
          console.log('‚ö†Ô∏è Assinatura n√£o encontrada ap√≥s todas as tentativas');
          return null;
        }
      } catch (error: any) {
        // Registra o erro em detalhes
        if (error.response) {
          // O servidor respondeu com status fora do intervalo 2xx
          console.error('Erro ao obter assinatura - resposta do servidor:', {
            status: error.response.status,
            data: error.response.data
          });
        } else if (error.request) {
          // A requisi√ß√£o foi feita mas n√£o houve resposta
          console.error('Erro ao obter assinatura - sem resposta:', error.request);
        } else {
          // Erro durante a configura√ß√£o da requisi√ß√£o
          console.error('Erro ao configurar requisi√ß√£o de assinatura:', error.message);
        }
        
        // Se ainda temos tentativas, esperar e tentar novamente
        if (attempts < maxRetries - 1) {
          console.log(`‚è≥ Erro ao verificar assinatura, tentando novamente em ${retryDelay/1000}s...`);
          await new Promise(resolve => setTimeout(resolve, retryDelay));
          attempts++;
        } else {
          // Se √© a √∫ltima tentativa e temos dados locais, usar como fallback
          if ((localStatus === 'active' || sessionStatus === 'active') && localPlanId) {
            // Verificar se os dados locais s√£o recentes
            const isRecent = localTimestamp && 
              (Date.now() - Number(localTimestamp) < 24 * 60 * 60 * 1000);
              
            if (isRecent) {
              console.log('‚ö†Ô∏è Erro na API, usando dados locais RECENTES como fallback');
              return {
                planId: localPlanId,
                status: 'active',
                currentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // +30 dias como fallback
                cancelAtPeriodEnd: false
              };
            } else {
              console.log('‚ö†Ô∏è Dados locais existem mas n√£o s√£o recentes (>24h)');
            }
          }
          
          // Retorna null em caso de erro para n√£o quebrar a interface
          console.log('‚ö†Ô∏è Erro ao verificar assinatura ap√≥s todas as tentativas');
          return null;
        }
      }
    }
    
    // Se chegamos aqui sem retornar, verificar dados locais uma √∫ltima vez
    if ((localStatus === 'active' || sessionStatus === 'active') && localPlanId) {
      // Verificar se os dados locais s√£o recentes
      const isRecent = localTimestamp && 
        (Date.now() - Number(localTimestamp) < 24 * 60 * 60 * 1000);
        
      if (isRecent) {
        console.log('‚ö†Ô∏è Ap√≥s todas as tentativas, usando dados locais RECENTES como √∫ltimo recurso');
        return {
          planId: localPlanId,
          status: 'active',
          currentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // +30 dias como fallback
          cancelAtPeriodEnd: false
        };
      }
    }
    
    // NOVO: Verifica√ß√£o final direta no banco de dados como √∫ltimo recurso
    try {
      console.log('üîç √öltima tentativa: verifica√ß√£o direta no banco como recurso final...');
      const { data: { user } } = await supabase.auth.getUser();
      
      if (user) {
        // Verificar assinatura diretamente via Supabase
        const { data: subscriptions, error: subError } = await supabase
          .from('subscriptions')
          .select('*')
          .eq('user_id', user.id)
          .eq('status', 'active');
        
        if (!subError && subscriptions && subscriptions.length > 0) {
          const subscription = subscriptions[0];
          const now = Math.floor(Date.now() / 1000);
          
          // Verificar se ainda est√° v√°lida
          if (subscription.status === 'active') {
            console.log('‚úÖ √öltima verifica√ß√£o: Assinatura v√°lida encontrada diretamente no banco!');
            
            // Atualizar localStorage
            localStorage.setItem('subscription_status', 'active');
            localStorage.setItem('subscription_planId', subscription.plan_id);
            localStorage.setItem('subscription_activated_at', Date.now().toString());
            sessionStorage.setItem('subscription_status_backup', 'active');
            sessionStorage.setItem('subscription_planId_backup', subscription.plan_id);
            
            return {
              planId: subscription.plan_id,
              status: 'active',
              currentPeriodEnd: new Date(subscription.current_period_end * 1000),
              cancelAtPeriodEnd: subscription.cancel_at_period_end || false
            };
          }
        }
      }
    } catch (finalError) {
      console.error('‚ùå Erro na verifica√ß√£o final direta no banco:', finalError);
    }
    
    return null;
  },
  
  /**
   * Acessa o portal do cliente do Stripe para gerenciar assinatura
   */
  async createCustomerPortalSession(): Promise<{ url: string }> {
    try {
      // Obter token de autentica√ß√£o
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session || !session.access_token) {
        throw new Error('Usu√°rio n√£o autenticado');
      }
      
      // Criar sess√£o do portal do cliente
      const response = await axios.post(
        `${API_URL}/payment/create-customer-portal`,
        {},
        {
          headers: {
            Authorization: `Bearer ${session.access_token}`
          }
        }
      );
      
      return response.data;
    } catch (error) {
      console.error('Erro ao acessar portal do cliente:', error);
      throw error;
    }
  },
  
  /**
   * Cancela a assinatura atual do usu√°rio
   */
  async cancelSubscription(): Promise<{ success: boolean }> {
    try {
      // Obter token de autentica√ß√£o
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session || !session.access_token) {
        throw new Error('Usu√°rio n√£o autenticado');
      }
      
      // Cancelar assinatura
      const response = await axios.post(
        `${API_URL}/payment/cancel-subscription`,
        {},
        {
          headers: {
            Authorization: `Bearer ${session.access_token}`
          }
        }
      );
      
      return response.data;
    } catch (error) {
      console.error('Erro ao cancelar assinatura:', error);
      throw error;
    }
  },

  /**
   * Realiza um diagn√≥stico completo da assinatura do usu√°rio
   * √ötil para debugar problemas com o fluxo de pagamento
   */
  async diagnosticSubscription(): Promise<any> {
    try {
      // Obter token de autentica√ß√£o
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session || !session.access_token) {
        throw new Error('Usu√°rio n√£o autenticado');
      }
      
      // Chamar endpoint de diagn√≥stico
      const response = await axios.get(
        `${API_URL}/payment/subscription/diagnostic`,
        {
          headers: {
            Authorization: `Bearer ${session.access_token}`
          }
        }
      );
      
      return response.data;
    } catch (error) {
      console.error('Erro ao executar diagn√≥stico de assinatura:', error);
      throw error;
    }
  },

  /**
   * Verifica se o usu√°rio tem uma assinatura cancelada
   * Retorna os detalhes da assinatura cancelada ou null se n√£o houver
   */
  async checkCanceledSubscription(): Promise<{
    id: string;
    planId: string;
    canceledAt: Date;
  } | null> {
    try {
      console.log('üîç Verificando se h√° assinaturas canceladas...');
      
      // Obter o usu√°rio autenticado
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        console.log('‚ùå Usu√°rio n√£o autenticado');
        return null;
      }
      
      // Buscar assinaturas canceladas do usu√°rio
      const { data: canceledSubscriptions, error } = await supabase
        .from('subscriptions')
        .select('*')
        .eq('user_id', user.id)
        .eq('status', 'canceled')
        .order('updated_at', { ascending: false })
        .limit(1);
      
      if (error) {
        console.error('‚ùå Erro ao verificar assinaturas canceladas:', error);
        return null;
      }
      
      if (!canceledSubscriptions || canceledSubscriptions.length === 0) {
        console.log('‚úÖ Nenhuma assinatura cancelada encontrada');
        return null;
      }
      
      const canceledSubscription = canceledSubscriptions[0];
      console.log('‚ö†Ô∏è Assinatura cancelada encontrada:', {
        id: canceledSubscription.id,
        planId: canceledSubscription.plan_id,
        updatedAt: canceledSubscription.updated_at
      });
      
      // Corrigir a convers√£o do timestamp
      // Se updated_at j√° for uma string ISO, usamos diretamente
      // Se for um timestamp Unix, multiplicamos por 1000 para converter para milissegundos
      const canceledAt = typeof canceledSubscription.updated_at === 'number' 
        ? new Date(canceledSubscription.updated_at * 1000) 
        : new Date(canceledSubscription.updated_at);
      
      return {
        id: canceledSubscription.subscription_id,
        planId: canceledSubscription.plan_id,
        canceledAt: canceledAt
      };
    } catch (error) {
      console.error('‚ùå Erro ao verificar assinaturas canceladas:', error);
      return null;
    }
  }
}; 